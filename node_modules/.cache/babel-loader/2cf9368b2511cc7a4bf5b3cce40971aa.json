{"ast":null,"code":"import store from '../../config/store';\nimport { SPRITE_SIZE, MAP_WIDTH, MAP_HEIGHT } from '../../config/constants';\nexport default function handleMovement(player) {\n  function getNewPosition(oldPos, direction) {\n    switch (direction) {\n      case 'West':\n        return [oldPos[0] - SPRITE_SIZE, oldPos[1]];\n\n      case 'East':\n        return [oldPos[0] + SPRITE_SIZE, oldPos[1]];\n\n      case 'North':\n        return [oldPos[0], oldPos[1] - SPRITE_SIZE];\n\n      case 'South':\n        return [oldPos[0], oldPos[1] + SPRITE_SIZE];\n    }\n  }\n\n  function observeImpossible(oldPos, newPos) {\n    const tiles = store.getState().map.tiles;\n    const y = newPos[1] / SPRITE_SIZE;\n    const x = newPos[0] / SPRITE_SIZE;\n    const nextTile = tiles[y][x];\n\n    if (nextTile === 4) {\n      store.dispatch({\n        type: 'TREASURE_FOUND',\n        payload: {\n          treasureFound: true\n        }\n      });\n    }\n\n    return nextTile < 5;\n  }\n\n  function getWalkIndex() {\n    const walkIndex = store.getState().player.walkIndex;\n    return walkIndex >= 7 ? 0 : walkIndex + 1;\n  }\n\n  function attemptMove(direction) {\n    const oldPos = store.getState().player.position;\n    const newPos = getNewPosition(oldPos, direction);\n    if (observerBoundaries(oldPos, newPos) && observeImpossible(oldPos, newPos)) dispatchMove(direction, newPos);\n  }\n\n  function getSpriteLocation(direction, walkIndex) {\n    switch (direction) {\n      case 'South':\n        return `${SPRITE_SIZE * walkIndex}px ${SPRITE_SIZE * 0}px`;\n\n      case 'East':\n        return `${SPRITE_SIZE * walkIndex}px ${SPRITE_SIZE * 1}px`;\n\n      case 'West':\n        return `${SPRITE_SIZE * walkIndex}px ${SPRITE_SIZE * 2}px`;\n\n      case 'North':\n        return `${SPRITE_SIZE * walkIndex}px ${SPRITE_SIZE * 3}px`;\n    }\n  }\n\n  function observerBoundaries(oldPos, newPos) {\n    return newPos[0] >= 0 && newPos[0] <= MAP_WIDTH - SPRITE_SIZE && newPos[1] >= 0 && newPos[1] <= MAP_HEIGHT - SPRITE_SIZE;\n  }\n\n  function dispatchMove(direction, newPos) {\n    const walkIndex = getWalkIndex();\n    store.dispatch({\n      type: 'MOVE_PLAYER',\n      payload: {\n        position: newPos,\n        direction,\n        walkIndex,\n        spriteLocation: getSpriteLocation(direction, walkIndex)\n      }\n    });\n  }\n\n  function handleKeyDown(e) {\n    e.preventDefault();\n\n    switch (e.keyCode) {\n      case 37:\n        return attemptMove('West');\n\n      case 38:\n        return attemptMove('North');\n\n      case 39:\n        return attemptMove('East');\n\n      case 40:\n        return attemptMove('South');\n\n      default:\n        console.log(e.keyCode);\n    }\n  }\n\n  window.addEventListener('keydown', e => {\n    handleKeyDown(e);\n  });\n  return player;\n}","map":{"version":3,"sources":["/home/tricon/mine/dungeon-game/src/features/player/movement.js"],"names":["store","SPRITE_SIZE","MAP_WIDTH","MAP_HEIGHT","handleMovement","player","getNewPosition","oldPos","direction","observeImpossible","newPos","tiles","getState","map","y","x","nextTile","dispatch","type","payload","treasureFound","getWalkIndex","walkIndex","attemptMove","position","observerBoundaries","dispatchMove","getSpriteLocation","spriteLocation","handleKeyDown","e","preventDefault","keyCode","console","log","window","addEventListener"],"mappings":"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","sourcesContent":["import store from '../../config/store'\nimport { SPRITE_SIZE, MAP_WIDTH, MAP_HEIGHT } from '../../config/constants'\n\nexport default function handleMovement(player) {\n    function getNewPosition(oldPos, direction) {\n        switch(direction) {\n            case 'West':\n                return [ oldPos[0]-SPRITE_SIZE, oldPos[1]]\n            case 'East':\n                return [ oldPos[0]+SPRITE_SIZE, oldPos[1]]   \n            case 'North':\n                return [ oldPos[0], oldPos[1]-SPRITE_SIZE]\n            case 'South':\n                 return [ oldPos[0], oldPos[1]+SPRITE_SIZE]\n        }\n    }\n\n    function observeImpossible(oldPos, newPos) {\n        const tiles = store.getState().map.tiles\n        const y = newPos[1] / SPRITE_SIZE\n        const x = newPos[0] / SPRITE_SIZE\n        const nextTile = tiles[y][x]\n        if (nextTile === 4) {\n            store.dispatch({\n                type: 'TREASURE_FOUND',\n                payload: {\n                    treasureFound: true,\n                }\n            })\n        }\n        return nextTile < 5\n    }\n\n    function getWalkIndex() {\n        const walkIndex = store.getState().player.walkIndex\n        return walkIndex >= 7 ? 0 : walkIndex + 1\n    }\n\n    function attemptMove(direction){\n        const oldPos = store.getState().player.position\n        const newPos = getNewPosition(oldPos, direction)\n        if(observerBoundaries(oldPos, newPos) && observeImpossible(oldPos, newPos))\n            dispatchMove(direction, newPos)\n    }\n\n    function getSpriteLocation(direction, walkIndex) {\n        switch(direction) {\n            case 'South':\n                return `${SPRITE_SIZE * walkIndex}px ${SPRITE_SIZE * 0}px`\n            case 'East':\n                return `${SPRITE_SIZE * walkIndex}px ${SPRITE_SIZE * 1}px`\n            case 'West':\n                return `${SPRITE_SIZE * walkIndex}px ${SPRITE_SIZE * 2}px`\n            case 'North':\n                return `${SPRITE_SIZE * walkIndex}px ${SPRITE_SIZE * 3}px`\n        }\n    }\n\n    function observerBoundaries(oldPos, newPos) {\n        return (newPos[0] >= 0 && newPos[0] <= MAP_WIDTH - SPRITE_SIZE) && \n               (newPos[1] >= 0 && newPos[1] <= MAP_HEIGHT - SPRITE_SIZE)\n    }\n\n    function dispatchMove (direction, newPos) {\n        const walkIndex = getWalkIndex()\n        store.dispatch({\n            type: 'MOVE_PLAYER',\n            payload: {\n                position: newPos,\n                direction,\n                walkIndex,\n                spriteLocation: getSpriteLocation(direction, walkIndex)\n            }\n        })\n    }\n\n    function handleKeyDown (e) {\n        e.preventDefault()\n        switch(e.keyCode) {\n            case 37:\n                return attemptMove('West')\n            case 38:\n                    return attemptMove('North')\n            case 39:\n                    return attemptMove('East')\n            case 40:\n                return attemptMove('South')\n            default:\n                console.log(e.keyCode)\n        }\n    }\n    window.addEventListener('keydown', (e) => {\n        handleKeyDown(e)\n    })\n    return player\n}"]},"metadata":{},"sourceType":"module"}