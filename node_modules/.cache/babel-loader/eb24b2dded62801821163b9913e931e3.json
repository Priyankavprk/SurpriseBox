{"ast":null,"code":"import store from '../../config/store';\nimport { SPRITE_SIZE, MAP_WIDTH, MAP_HEIGHT } from '../../config/constants';\nexport default function handleMovement(player) {\n  function getNewPosition(oldPos, direction) {\n    switch (direction) {\n      case 'West':\n        return [oldPos[0] - SPRITE_SIZE, oldPos[1]];\n\n      case 'East':\n        return [oldPos[0] + SPRITE_SIZE, oldPos[1]];\n\n      case 'North':\n        return [oldPos[0], oldPos[1] - SPRITE_SIZE];\n\n      case 'South':\n        return [oldPos[0], oldPos[1] + SPRITE_SIZE];\n    }\n  }\n\n  function observeImpossible(oldPos, newPos) {\n    const tiles = store.getState().map.tiles;\n    const y = newPos[1] / SPRITE_SIZE;\n    const x = newPos[0] / SPRITE_SIZE;\n    const nextTile = tiles[y][x];\n    return nextTile < 5;\n  }\n\n  function attemptMove(direction) {\n    const oldPos = store.getState().player.position;\n    const newPos = getNewPosition(oldPos, direction);\n    if (observerBoundaries(oldPos, newPos) && observeImpossible(oldPos, newPos)) dispatchMove(direction, newPos);\n  }\n\n  function getSpriteLocation(direction) {\n    switch (direction) {\n      case 'South':\n        return `0px 0px`;\n\n      case 'East':\n        return `0px 40px`;\n\n      case 'West':\n        return `0px 80px`;\n\n      case 'North':\n        return `0px 120px`;\n    }\n  }\n\n  function observerBoundaries(oldPos, newPos) {\n    return newPos[0] >= 0 && newPos[0] <= MAP_WIDTH - SPRITE_SIZE && newPos[1] >= 0 && newPos[1] <= MAP_HEIGHT - SPRITE_SIZE;\n  }\n\n  function dispatchMove(direction, newPos) {\n    store.dispatch({\n      type: 'MOVE_PLAYER',\n      payload: {\n        position: newPos,\n        direction,\n        spriteLocation: getSpriteLocation(direction)\n      }\n    });\n  }\n\n  function handleKeyDown(e) {\n    e.preventDefault();\n\n    switch (e.keyCode) {\n      case 37:\n        return attemptMove('West');\n\n      case 38:\n        return attemptMove('North');\n\n      case 39:\n        return attemptMove('East');\n\n      case 40:\n        return attemptMove('South');\n\n      default:\n        console.log(e.keyCode);\n    }\n  }\n\n  window.addEventListener('keydown', e => {\n    handleKeyDown(e);\n  });\n  return player;\n}","map":{"version":3,"sources":["/home/tricon/mine/dungeon-game/src/features/player/movement.js"],"names":["store","SPRITE_SIZE","MAP_WIDTH","MAP_HEIGHT","handleMovement","player","getNewPosition","oldPos","direction","observeImpossible","newPos","tiles","getState","map","y","x","nextTile","attemptMove","position","observerBoundaries","dispatchMove","getSpriteLocation","dispatch","type","payload","spriteLocation","handleKeyDown","e","preventDefault","keyCode","console","log","window","addEventListener"],"mappings":"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","sourcesContent":["import store from '../../config/store'\nimport { SPRITE_SIZE, MAP_WIDTH, MAP_HEIGHT } from '../../config/constants'\n\nexport default function handleMovement(player) {\n    function getNewPosition(oldPos, direction) {\n        switch(direction) {\n            case 'West':\n                return [ oldPos[0]-SPRITE_SIZE, oldPos[1]]\n            case 'East':\n                return [ oldPos[0]+SPRITE_SIZE, oldPos[1]]   \n            case 'North':\n                return [ oldPos[0], oldPos[1]-SPRITE_SIZE]\n            case 'South':\n                 return [ oldPos[0], oldPos[1]+SPRITE_SIZE]\n        }\n    }\n\n    function observeImpossible(oldPos, newPos) {\n        const tiles = store.getState().map.tiles\n        const y = newPos[1] / SPRITE_SIZE\n        const x = newPos[0] / SPRITE_SIZE\n        const nextTile = tiles[y][x]\n        return nextTile < 5\n    }\n\n    function attemptMove(direction){\n        const oldPos = store.getState().player.position\n        const newPos = getNewPosition(oldPos, direction)\n        if(observerBoundaries(oldPos, newPos) && observeImpossible(oldPos, newPos))\n            dispatchMove(direction, newPos)\n    }\n\n    function getSpriteLocation(direction) {\n        switch(direction) {\n            case 'South':\n                return `0px 0px`\n            case 'East':\n                return `0px 40px`\n            case 'West':\n                return `0px 80px`\n            case 'North':\n                return `0px 120px`\n        }\n    }\n\n    function observerBoundaries(oldPos, newPos) {\n        return (newPos[0] >= 0 && newPos[0] <= MAP_WIDTH - SPRITE_SIZE) && \n               (newPos[1] >= 0 && newPos[1] <= MAP_HEIGHT - SPRITE_SIZE)\n    }\n\n    function dispatchMove (direction, newPos) {\n        store.dispatch({\n            type: 'MOVE_PLAYER',\n            payload: {\n                position: newPos,\n                direction,\n                spriteLocation: getSpriteLocation(direction)\n            }\n        })\n    }\n\n    function handleKeyDown (e) {\n        e.preventDefault()\n        switch(e.keyCode) {\n            case 37:\n                return attemptMove('West')\n            case 38:\n                    return attemptMove('North')\n            case 39:\n                    return attemptMove('East')\n            case 40:\n                return attemptMove('South')\n            default:\n                console.log(e.keyCode)\n        }\n    }\n    window.addEventListener('keydown', (e) => {\n        handleKeyDown(e)\n    })\n    return player\n}"]},"metadata":{},"sourceType":"module"}